from string import punctuation

from random import choice

from aiogram import Router, types, F
from aiogram.utils.formatting import as_list, as_marked_section, Bold
from aiogram.filters import CommandStart, Command, or_f
from aiogram.types import Message

# from lessBot import dicts
from lessBot.dicts import restricted_words, greeting, parting
from lessBot.filters.chat_types import ChatTypesFilters
from lessBot.kbds import reply

user_private_router = Router()
user_private_router.message.filter(ChatTypesFilters(['private']))

# –•–µ–Ω–¥–ª–µ—Ä —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}, —è, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
                         # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—Ç–æ—Ä—ã–º —Å–ø–æ—Å–æ–±–æ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø–∏—à—É—Ç—Å—è —Ç–∞–∫!!!!
                         reply_markup=reply.start_cb3.as_markup(resize_keyboard=True,
                                                                input_field_placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç??"))

# —Ö–µ–Ω–¥–ª–µ—Ä –º–µ–Ω—é
@user_private_router.message(or_f(Command('menu'),F.text.lower().contains('–º–µ–Ω—é')))
async def menu_cmd(message: types.Message):
    await message.answer("–≠—Ç–æ –º–µ–Ω—é", reply_markup=reply.del_kbd)

# —Ö–µ–Ω–¥–ª–µ—Ä  –∞–±–æ—É—Ç
@user_private_router.message(or_f(Command('about'), F.text.lower().contains('–æ –º–∞–≥–∞–∑–∏–Ω–µ')))
async def about_cmd(message: types.Message):
    await message.answer("–≠—Ç–æ –ø—Ä–æ –Ω–∞—Å", reply_markup=reply.del_kbd)

# —Ö–µ–Ω–¥–ª–µ—Ä  –æ–ø–ª–∞—Ç—ã
@user_private_router.message(F.text.lower().contains('–∫–∞–∫ –∑–∞–ø–ª–∞—Ç–∏—Ç—å') |
                             F.text.lower().contains('–æ–ø–ª–∞—Ç'))
@user_private_router.message(Command('payment'))
async def payment_cmd(message: types.Message):

    text = as_marked_section(
        Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã:\n"),
        "–ö–∞—Ä—Ç–æ–π –≤ –±–æ—Ç–µ\n",
        "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞/–∫—ç—à\n",
        "–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏",
        marker="‚úÖ "
    )

    await message.answer(text.as_html(), reply_markup=reply.del_kbd)

# —Ö–µ–Ω–¥–ª–µ—Ä  –¥–æ—Å—Ç–∞–≤–∫–∏
@user_private_router.message(F.text.lower().contains('–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏') |
                             F.text.lower().contains('–¥–æ—Å—Ç–∞'))
@user_private_router.message(Command('shipping'))
async def shipping_cmd(message: types.Message):

    text = as_list(as_marked_section(
        Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:\n"),
        "–ö—É—Ä—å–µ—Ä\n",
        "–°–∞–º–æ–≤—ã–≤–æ–∑(–°–µ–π—á–∞—Å –ø—Ä–∏–¥—É –∑–∞–±–µ—Ä—É)\n",
        "–ü–æ–∫—É—à–∞—é —É –≤–∞—Å (–°–µ–π—á–∞—Å –ø—Ä–∏–±–µ–≥—É)",
        marker="‚úÖ "
    ),
    as_marked_section(
        Bold("–ù–µ–ª—å–∑—è:\n"),
        "üìØ –ü–æ—á—Ç–∞\n",
        "üïä –ì–æ–ª—É–±–∏",
        marker="‚ùå "
    ),
    sep = "\n-----------------\n")

    await message.answer(text.as_html(), reply_markup=reply.del_kbd)

# —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
@user_private_router.message(F.text.lower().contains('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤') |
                             F.text.lower().contains('–æ—Ç–∑—ã'))
async def get_fedback(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ª–æ–∫–∞—Ü–∏—é", reply_markup=reply.test_cb)


# –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —Å –º–∞–≥–∏—á–µ—Å–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º
@user_private_router.message(F.photo)
async def foto_handler(message: types.Message):
    await message.answer('–≠—Ç–æ —Ñ–æ—Ç–æ')

def clean_text(text: str):
    return text.translate(str.maketrans('', '', punctuation))

# –•–µ–Ω–¥–ª–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ö–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –ª–æ–∫–∞—Ü–∏–∏
@user_private_router.message(F.contact)
async def get_contact(message: Message):
    await message.answer(f"–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω \n{message.contact.first_name}\n"
                         f"‚òéÔ∏è {message.contact.phone_number}")

@user_private_router.message(F.location)
async def get_location(message: Message):
    await message.answer(f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ \n–¥–æ–ª–≥–æ—Ç–∞:{message.location.longitude}\n—à–∏—Ä–æ—Ç–∞:"
                         f"{message.location.latitude}")

# —Ö–µ–Ω–¥–ª–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@user_private_router.message(F.text)
async def greeting_handler(message: types.Message):
    try:
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = message.text
        text = text.lower()
        if text in greeting:
            # –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏–∑ —Ç–æ–≥–æ –∂–µ —Å–ø–∏—Å–∫–∞
            await message.answer(choice(greeting))
        elif text in parting:
            await message.answer(choice(parting))
        # —Ü–µ–Ω–∑—É—Ä–∞
        elif restricted_words.intersection(message.text.lower().split()):
            await message.delete()
        else:
            await message.answer('–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–æ–≥–æ —á–µ–≥–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª')
    except:
        await message.answer(f'–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞ {message.text}')
